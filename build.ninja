builddir = obj

config = $
    -O0 -ggdb $
    -DDEBUG -DALG_DEBUG $
    -DINP_KEYS -DINP_TEXT -DINP_MOUSE
flags = -fdiagnostics-color=always
incl = -I . -I ext/include
corelibs = -lmsvcrt -luser32 -lshell32 -lgdi32 $
    -Wl,-nodefaultlib:libcmt -Wl,-nodefaultlib:msvcrtd
libs = -L ext/lib -lglfw3 -lvulkan

rule cc
    depfile = $out.d
    deps = gcc
    command = clang -MD -MF $out.d $
              $config $flags $incl -c $in -o $out
rule ld
    command = clang $in $libs -o $out
rule ar
    command = lib $in $libs /out:$out

build $builddir/main.o: cc main.c
build $builddir/inp.o: cc inp.c

build bin/libtxtquad.so: $
    ld $builddir/main.o $builddir/inp.o
build so: phony bin/libtxtquad.so

build bin/txtquad.lib: $
    ar $builddir/main.o $builddir/inp.o
    libs = ext/lib/glfw3.lib ext/lib/vulkan.lib
build lib: phony bin/txtquad.lib

# EXAMPLES #

rule shc
    command = glslc $in -o $out
rule lde
    command = clang $in $corelibs $libs -o $out

build assets/vert.spv: shc text.vert
build assets/frag.spv: shc text.frag

demo = 2
build $builddir/demos.o: cc examples/demos.c
    config = -O0 -ggdb -DDEMO_$demo

build bin/demos: $
    lde $builddir/demos.o $
    | bin/libtxtquad.so assets/vert.spv assets/frag.spv
    libs = -L bin -ltxtquad
build demos: phony bin/demos

build bin/demos.exe: $
    lde $builddir/demos.o $
    | bin/txtquad.lib assets/vert.spv assets/frag.spv
    libs = -L bin -ltxtquad
build demos.exe: phony bin/demos.exe
